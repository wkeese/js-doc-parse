{
  "name": "js-doc-parse",
  "version": "1.0.0",
  "description": "A library for parsing JavaScript files and extracting inline documentation. Designed primarily for use with the Dojo Toolkit, but extensible enough to work with any application or documentation format.",
  "keywords": [
    "JavaScript",
    "Dojo",
    "documentation",
    "parser"
  ],
  "homepage": "http://dojotoolkit.org/",
  "dependencies": {
    "dojo": "1.9.2",
    "esprima": "1.0.4",
    "marked": "0.2.5"
  },
  "readme": "js-doc-parse\n============\n\nA library for parsing JavaScript files and extracting inline documentation. Designed primarily for use with the Dojo\nToolkit, but extensible enough to work with any application or documentation format.\n\nNew BSD License © 2011–2013 Colin Snover <http://zetafleet.com>, SitePen Inc. <http://www.sitepen.com>, and\nother contributors. Released under [Dojo Foundation CLA](http://dojofoundation.org/about/cla).\n\nWhy is this library special?\n----------------------------\n\n1. Works anywhere, not only on Rhino. (n.b. by “anywhere” I mean “node.js”, but there’s only a handful of code that\n   needs to be abstracted for it to work on Rhino and in the browser, too, and I plan on doing just that.)\n2. It isn’t lazy! js-doc-parse completely parses the actual JavaScript source code to extract API details instead of\n   just running some crappy regular expressions over the source text to pluck out comment blocks.\n3. [Highly extensible](https://github.com/wkeese/js-doc-parse/blob/master/config.js), with initially planned support\n   for two code commenting styles (dojodoc and jsdoc).\n\nWait, _highly_ extensible? Tell me more!\n----------------------------------------\n\nOh, alright! This documentation parser is designed to allow you, a JavaScript developer, to very easily extend four key\nareas of operation:\n\n1. Environments\n\n   Your code might run in a variety of environments and exploit natively available functionality of each environment.\n   If the documentation parser doesn’t know about all those delicious native objects, it can’t help you document\n   anything you borrow from them. Pluggable environments let you define all the built-ins of the environment your code\n   runs in so it doesn’t fall over when you try to `var slice = [].slice;`.\n\n2. Call handlers\n\n   Chances are good that whatever library you’re using has at least one function that retrieves, decorates, or iterates\n   over objects that you need to document. Adding custom call handlers makes it possible for the documentation parser\n   to understand and evaluate these special calls so that the correct properties exist on the correct objects and that\n   any special magic that these functions might represent can be annotated.\n\n3. Documentation processors\n\n   Some people don’t like the standard jsdoc syntax, and that’s cool. If you’ve extended jsdoc with some new tags, or\n   use some completely different format like dojodocs, Natural Docs, or docco – or, after an evening of heavy drinking,\n   created your own custom documentation format from scratch – writing a new documentation processor will enable you\n   to process any format your heart desires. It will not, however, cure your cirrhosis.\n\n4. Exporters\n\n   Once the code has been parsed and the documentation parsed, you’ll need to output the result to a format that you\n   (or some tool other than you) can actually use! Exporters are completely isolated from the documentation processing\n   workflow, so you can pick and choose one (or lots of) exporters for your final output.\n\nDependencies\n------------\n\n[dojo](https://github.com/dojo/dojo) – AMD loader & helper library\n[esprima](https://github.com/ariya/esprima) – ECMAScript parser\n[marked](https://github.com/chjj/marked) – Markdown parser\n\nInstructions\n------------\n\n1. `git clone --recursive https://github.com/wkeese/js-doc-parse.git`\n2. Copy and edit `config.js` as appropriate for your environment. For parsing Dojo Toolkit source, you should only need\n   to set `basePath` to the path to your Dojo 1.8 checkout.\n3. Run `./parse.sh config=path/to/your/config.js` to generate documentation for the packages you’ve specified. In\n   your config. By default, this documentation will be exported to `details.xml`; update the exporter configuration if\n   you want it to go elsewhere.\n4. See https://github.com/lbod/dapi/wiki for instructions on viewing the output",
  "readmeFilename": "README.md",
  "_id": "js-doc-parse@1.0.0",
  "dist": {
    "shasum": "14af5fa98b827fe1721dfd831fea7b67389cd5b7"
  },
  "_from": "http://github.com/superdweebie/js-doc-parse/tarball/master",
  "_resolved": "http://github.com/superdweebie/js-doc-parse/tarball/master"
}
